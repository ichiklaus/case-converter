type: edu
files:
- name: src/index.html
  visible: true
  text: |
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <link rel="stylesheet" href="style.css">
        <title>Case Converter</title>
        <script type="text/javascript" src="script.js" async></script>
    </head>
    <body>
    <div class="container">
        <div class="card">
            <div class="title">Case Converter</div>
            <label for="input"></label>
            <textarea class="area" name="input" id="input" cols="30" rows="10"></textarea>
            <div class="action-btn btn-style">
                <button id="upper-case" class="btn">Upper Case</button>
                <button id="lower-case" class="btn">Lower Case</button>
                <button id="proper-case" class="btn">Proper Case</button>
                <button id="sentence-case" class="btn">Sentence Case</button>
                <button id="save" class="btn save">Save</button>
            </div>
        </div>
    </div>
    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: |
    const puppeteer = require('puppeteer');
    const path = require('path');
    const hs = require('hs-test-web');
    const fs = require("fs");
    const rimraf = require("rimraf");

    const workingDir = path.resolve(__dirname, '../src');
    const pagePath = 'file://' + path.resolve(__dirname, workingDir + '/index.html');


    const sleep = (ms) => new Promise(res => setTimeout(res, ms));

    async function stageTest() {
        const browser = await puppeteer.launch({
            headless: false,
            defaultViewport: null,
            args: ['--start-maximized', '--disable-infobar'],
            ignoreDefaultArgs: ['--enable-automation']
        });

        const page = await browser.newPage();
        await page.goto(pagePath);
        await page._client.send('Page.setDownloadBehavior', {
            behavior: 'allow',
            downloadPath: workingDir + path.sep + "downloads"
        });

        page.on('console', msg => console.log(msg.text()));

        await sleep(1000);

        rimraf.sync(workingDir + '/downloads');

        let result = await hs.testPage(page,
            // Test #1
            () => {
                const nodes = document.getElementsByClassName("title");

                if (nodes.length !== 1) {
                    return hs.wrong("There should be one element with class 'title', found " + nodes.length + "!")
                }

                const titleDiv = nodes[0];

                if (titleDiv.textContent !== 'Case Converter') {
                    return hs.wrong("The title name should be 'Case Converter', but found " + titleDiv.textContent.trim())
                }

                return hs.correct()
            },

            // Test #2
            () => {
                const nodes = document.getElementsByTagName("textarea");

                if (nodes.length !== 1) {
                    return hs.wrong("There should be one 'textarea' element, found " + nodes.length + "!")
                }

                this.textArea = nodes[0];

                if (this.textArea.textContent.trim() !== '') {
                    return hs.wrong("TextArea should be empty by default!")
                }

                return hs.correct()
            },

            // Test #3
            () => {
                this.upperCaseButton = document.querySelector("button#upper-case")
                this.lowerCaseButton = document.querySelector("button#lower-case")
                this.properCaseButton = document.querySelector("button#proper-case")
                this.sentenceCaseButton = document.querySelector("button#sentence-case")
                this.saveTextFileButton = document.querySelector("button#save-text-file")

                if (this.upperCaseButton === null) {
                    return hs.wrong("Can't find a button with '#upper-case' id!")
                }

                if (this.lowerCaseButton === null) {
                    return hs.wrong("Can't find a button with '#lower-case' id!")
                }

                if (this.properCaseButton === null) {
                    return hs.wrong("Can't find a button with '#proper-case' id!")
                }

                if (this.sentenceCaseButton === null) {
                    return hs.wrong("Can't find a button with '#sentence-case' id!")
                }

                if (this.saveTextFileButton === null) {
                    return hs.wrong("Can't find a button with '#save-text-file' id!")
                }

                return hs.correct()
            },

            // Test #4
            () => {

                this.textArea.value = 'Lorem Ipsum is simply dummy text of the printing and typesetting industry.' +
                    ' Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s,' +
                    ' when an unknown printer took a galley of type and scrambled it to make a type specimen book.'

                const upperCaseText = 'LOREM IPSUM IS SIMPLY DUMMY TEXT OF THE PRINTING AND TYPESETTING INDUSTRY.' +
                    ' LOREM IPSUM HAS BEEN THE INDUSTRY\'S STANDARD DUMMY TEXT EVER SINCE THE 1500S,' +
                    ' WHEN AN UNKNOWN PRINTER TOOK A GALLEY OF TYPE AND SCRAMBLED IT TO MAKE A TYPE SPECIMEN BOOK.'

                this.upperCaseButton.click()

                if (this.textArea.value !== upperCaseText) {
                    return hs.wrong("After clicking on 'Upper Case' button your text is wrong!")
                }

                const lowerCaseText = 'lorem ipsum is simply dummy text of the printing and typesetting industry.' +
                    ' lorem ipsum has been the industry\'s standard dummy text ever since the 1500s,' +
                    ' when an unknown printer took a galley of type and scrambled it to make a type specimen book.'

                this.lowerCaseButton.click()

                if (this.textArea.value !== lowerCaseText) {
                    return hs.wrong("After clicking on 'Lower Case' button your text is wrong!")
                }

                const properCase = 'Lorem Ipsum Is Simply Dummy Text Of The Printing And Typesetting Industry.' +
                    ' Lorem Ipsum Has Been The Industry\'s Standard Dummy Text Ever Since The 1500s,' +
                    ' When An Unknown Printer Took A Galley Of Type And Scrambled It To Make A Type Specimen Book.'

                this.properCaseButton.click()

                if (this.textArea.value !== properCase) {
                    return hs.wrong("After clicking on 'Proper Case' button your text is wrong!")
                }

                const sentenceCase = 'Lorem ipsum is simply dummy text of the printing and typesetting industry.' +
                    ' Lorem ipsum has been the industry\'s standard dummy text ever since the 1500s,' +
                    ' when an unknown printer took a galley of type and scrambled it to make a type specimen book.'

                this.sentenceCaseButton.click()

                if (this.textArea.value !== sentenceCase) {
                    return hs.wrong("After clicking on 'Sentence Case' button your text is wrong!")
                }

                return hs.correct()
            },

            // Test #5
            async () => {
                this.saveTextFileButton.click()

                const delay = ms => new Promise(res => setTimeout(res, ms));
                await delay(2000);

                return hs.correct()
            }
        );

        if (result['type'] === 'wrong') {
            await browser.close();
            return result;
        }

        result = await hs.test(
            () => {

                const correctTextFileContent = 'Lorem ipsum is simply dummy text of the printing and typesetting industry.' +
                    ' Lorem ipsum has been the industry\'s standard dummy text ever since the 1500s,' +
                    ' when an unknown printer took a galley of type and scrambled it to make a type specimen book.'

                const filePath = workingDir + `${path.sep}downloads${path.sep}text.txt`;

                if (!fs.existsSync(filePath)) {
                    return hs.wrong("Looks like you didn't download a text file named 'text.txt', after clicking on 'Save Text File' button")
                }

                let fileContent = fs.readFileSync(filePath, "utf8");

                if (fileContent !== correctTextFileContent) {
                    return hs.wrong("Content of downloaded file is wrong!")
                }

                return hs.correct()
            }
        )

        rimraf.sync(workingDir + '/downloads');

        await browser.close();
        return result;
    }

    jest.setTimeout(30000);
    test("Test stage", async () => {
            let result = await stageTest();
            if (result['type'] === 'wrong') {
                fail(result['message']);
            }
        }
    );
  learner_created: false
- name: src/script.js
  visible: true
  text: |-
    /****************
     * Get DOM handlers
     */
    let textArea = document.getElementById('input');
    let btnUpperCase = document.getElementById('upper-case');
    let btnLowerCase = document.getElementById('lower-case');
    let btnProperCase = document.getElementById('proper-case');
    let btnSentenceCase = document.getElementById('sentence-case');
    let btnSave = document.getElementById('save');

    // DOM listener events
    btnUpperCase.addEventListener("click", function toUpperCase() {
        textArea.value = textArea.value.toUpperCase();
    });

    btnLowerCase.addEventListener("click", function toLowerCase() {
        textArea.value = textArea.value.toLowerCase();
    });

    btnProperCase.addEventListener(("click"), function toProperCase() {
        let str = textArea.value.split(' ');
        let arrStr = trimStr(str);
        textArea.value = arrStr.map(item =>
            item[0].toUpperCase() + item.substr(1).toLowerCase()).join(' ');
    });

    btnSentenceCase.addEventListener(("click"), function toSentenceCase() {
        let str = textArea.value.split('.');
        if (str[str.length - 1] === "") {
            str.pop();
        }
        let arrStr = trimStr(str);
        arrStr = arrStr.map(item =>
            item[0].toUpperCase() + item.substr(1).toLowerCase()).join('. ');
        textArea.value = arrStr + ".";
    });

    function trimStr(fixedStr) {
        let arrStr = [];
        fixedStr.forEach(ele => arrStr.push(ele.trim()));
        return arrStr;
    }


    function saveTextAsFile() {
        let textFileAsBlob = new Blob([textArea.value], {type:'text/plain'});
        let downloadLink = document.createElement("a");
        downloadLink.download = "converted.txt";
        downloadLink.innerHTML = "Download File";
        if (window.webkitURL != null) {
            // Chrome allows the link to be clicked
            // without actually adding it to the DOM.
            downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
        }
        else {
            // Firefox requires the link to be added to the DOM
            // before it can be clicked.
            downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
            downloadLink.style.display = "none";
            document.body.appendChild(downloadLink);
        }
        downloadLink.click();
    }
    btnSave.onclick = saveTextAsFile;
  learner_created: false
- name: src/style.css
  visible: true
  text: |-
    @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Mono:wght@200;400&display=swap');

    :root {
        --some-blue: rgb(84,81,214);
        --some-violet: rgb(88,71,199);
        --bg-grayblue:rgb(219,233,246);
    }

    /*****************************************
     *   Base Styles
     */

    html, body, .container {
        width: 100%;
        height: 100%;
    }

    body {
        background: var(--bg-grayblue);
    }

    body, * {
        font-family: 'Noto Sans Mono', monospace;
    }

    .container {
        display: flex;
        flex-flow: column wrap;
        align-content: center;
        justify-content: center;
    }

    .card {
        display: flex;
        flex-flow: column wrap;
        width: 480px;
        box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
        background: var(--some-violet);
        padding: 1.5em;
        border-radius: 50px;
    }

    .title {
        text-align: center;
        margin: 1em;
        color: white;
        font-size: 2.5em;
    }

    .area {
        margin: .75em;
        padding: 2em;
        resize: none;
        font-weight: 200;
    }

    .action-btn {
        display: grid;
        grid-template-columns: auto auto;
        gap: 1em;
        align-items: center;
        margin: .75em;
    }

    .btn-style {

    }

    .btn {
        padding: 1.25em;
        border-style: hidden;
        background: var(--some-blue);
        color: white;
        box-shadow: rgba(0, 0, 0, 0.1) 0px 20px 25px -5px, rgba(0, 0, 0, 0.04) 0px 10px 10px -5px;
        font-weight: 400;
    }

    .btn.save {
        grid-column-end: span 2;
    }

    .btn:hover {
        background: var(--bg-grayblue);
        color: var(--some-blue);
        cursor: pointer;
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/193/stages/964/implement#comment
status: Solved
record: 2
